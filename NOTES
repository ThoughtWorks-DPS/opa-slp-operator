### development

Inited using operator-sdk.  

# initialize a new empty operator helm template
1. operator-sdk init --domain twdps --repo github.com/ThoughtWorks-DPS/opa-slp-operator

for helm
operator-sdk init --plugins helm --domain twdps.io --group opa --version v1alpha1 --kind SlpDeployment

# generate new API and controller
1. operator-sdk create api --group opa --version v1alpha1 --kind StyraLocalPlane --resource=true --controller=true

# Define resouce and status Struct fields

Add fields to type StyraLocalPlane struct
```go
	SystemName  string `json:"systemName,omitempty"`  // (required) Sytra System name
	AccessToken string `json:"accessToken,omitempty"` // (required) Styra access Token
	Namespace   string `json:"namespace,omitempty"`   // (optional) Namespace where SLP should be deployed
	Tag         string `json:"tag,omitempty"`         // (optional) styra/styra-local-plane image tag to use
```
```bash
$ make generate
```

Add fields to type StyraLocalPlaneStatus struct
```go
	Ready corev1.ConditionStatus `json:"ready"`  // slp status       
	Status string `json:"status,omitempty"`      // slp pod status
```
```bash
$ make generate
```

Generate manifests
```bash
$ make manifests
```

# customize controller

# in the defaults folder

set the namespace for the operator to run = opa-system

## modify makefile

IMG
VERSION
IMAGE_TAG_BASE



## to use this helm-managed slp deploy operator

- depends upon a credentials secrets already being deployed in the namespace where you deploy a resource request
- the credentials secret must have the following format



types =================

/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// StyraLocalPlaneSpec defines the desired state of StyraLocalPlane
type StyraLocalPlaneSpec struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	SlpRegistry      string `json:"slpRegistry,omitempty"`      // Optional, default is styra/styra-local-plane
	SlpVersion       string `json:"slpVersion,omitempty"`       // Optional, default managed by operator deployment
	ServiceName      string `json:"serviceName,omitempty"`      // Optional, default is slp-istio-svc
	StyraCredentials string `json:"styraCredentials,omitempty"` // Optional, default is slp-system-credentials
}

// StyraLocalPlaneStatus defines the observed state of StyraLocalPlane
type StyraLocalPlaneStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	Ready  corev1.ConditionStatus `json:"ready"`            // slp status
	Status string                 `json:"status,omitempty"` // slp pod status
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status

// StyraLocalPlane is the Schema for the styralocalplanes API
type StyraLocalPlane struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   StyraLocalPlaneSpec   `json:"spec,omitempty"`
	Status StyraLocalPlaneStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// StyraLocalPlaneList contains a list of StyraLocalPlane
type StyraLocalPlaneList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StyraLocalPlane `json:"items"`
}

func init() {
	SchemeBuilder.Register(&StyraLocalPlane{}, &StyraLocalPlaneList{})
}


controller ====================

/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"context"
	"fmt"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	//"k8s.io/apimachinery/pkg/types"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	ctrllog "sigs.k8s.io/controller-runtime/pkg/log"

	opav1alpha1 "github.com/ThoughtWorks-DPS/opa-slp-operator/api/v1alpha1"
	//styra "github.com/ThoughtWorks-DPS/opa-slp-operator/controllers/styra"
)

// StyraLocalPlaneReconciler reconciles a StyraLocalPlane object
type StyraLocalPlaneReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

//+kubebuilder:rbac:groups=opa.twdps,resources=styralocalplanes,verbs=get;list;watch;create;update;patch;delete
//+kubebuilder:rbac:groups=opa.twdps,resources=styralocalplanes/status,verbs=get;update;patch
//+kubebuilder:rbac:groups=opa.twdps,resources=styralocalplanes/finalizers,verbs=update
//+kubebuilder:rbac:groups=*,resources=secrets,verbs=get;list;watch;create;update;patch;delete

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the StyraLocalPlane object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.12.1/pkg/reconcile
func (r *StyraLocalPlaneReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := ctrllog.FromContext(ctx)

	// Fetch the StyraLocalPlane resource request
	styraLocalPlane := &opav1alpha1.StyraLocalPlane{}
	if err := r.Get(ctx, req.NamespacedName, styraLocalPlane); err != nil {
		if errors.IsNotFound(err) {
			log.Info("StyraLocalPlane resource not found. Ignoring since object must be deleted")
			return ctrl.Result{}, nil
		}
		log.Error(err, "Failed to get StyraLocalPlane")
		return ctrl.Result{}, err
	}

	// Log reconcilation-loop event
	log.Info(fmt.Sprintf("Reconciling StyraLocalPlane %s/%s", req.NamespacedName.Namespace, req.NamespacedName.Name))

	// if Ready is undefined, set it to false since this is the first time to reconcile a new request
	if styraLocalPlane.Status.Ready == "" {
		log.Info("New sytraLocalPlane request. Ready is blank.")
		styraLocalPlane.Status.Ready = corev1.ConditionFalse
		styraLocalPlane.Status.Status = "Starting"
		_ = r.Status().Update(ctx, styraLocalPlane)
	}

	// fetch Styra System opa token and write slp credential secret
	// key := types.NamespacedName{Namespace: req.NamespacedName.Namespace, Name: styraLocalPlane.Spec.StyraCredentials}
	// secret := &corev1.Secret{}
	// if err := r.Get(ctx.TODO(), key, secret); err != nil {
	// 	log.Error(err, "Failed to get kubernetes secret named in AccessTokenSecret")
	// 	return ctrl.Result{}, err
	// }

	// log.Info("Secret", "object", secret, "data", secret.Data)

	// Set status conditions
	//styraLocalPlane.Status.Ready =
	//styraLocalPlane.Status.Status =

	// req.NamespacedName.Namespace

	err := r.Status().Update(ctx, styraLocalPlane)
	if err != nil {
		log.Error(err, "Failed to update styraLocalPlane status")
		return ctrl.Result{}, err
	}

	return ctrl.Result{}, nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *StyraLocalPlaneReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&opav1alpha1.StyraLocalPlane{}).
		Complete(r)
}

